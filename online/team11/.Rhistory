knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
setwd("C:/Users/alex.novet/Dropbox/Team 11")
dat1 <- read.csv("final_data2.csv")
#In Excel, I split out the location x and y values, but the file is otherwise the same.
#Find the transition event after each zone exit (imperfect, but acceptable for now)
exit_entry <- filter(dat1, game_state == "5v5",
type %in% c("zone_exit", "zone_entry"),
!sub_type %in% c("failed", "icing", "dump_change")) %>%
group_by(game_id, period) %>%
mutate(next_transition_team = lead(team_id))
#Define success for each exit based on the next transition play
exits1 <- exit_entry %>%
filter(type == "zone_exit") %>%
mutate(successful_exit = team_id == next_transition_team)
#Now merge this information back into the original data file, and make it 5v5
dat2 <- dat1 %>%
filter(game_state == "5v5") %>%
left_join(exits1)
exits2 <- dat2 %>%
filter(type == "zone_exit") %>% #Remove the ones at the end of the period with no subsequent event
mutate(successful_exit = ifelse(sub_type %in% c("failed", "icing", "dump_change"), FALSE, successful_exit)) %>%
filter(!is.na(successful_exit))
exit_success_QC <- group_by(exits2, sub_type) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(rate = successes/n)
exit_success <- exits2 %>%
mutate(main_x = -abs(main_x)) %>%
group_by(main_x, main_y) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(success_rate = successes/n) %>%
filter(main_x < -25,
main_x > -92 | abs(main_y) < 92,
n > 10) #Removing neutral zone, non-existant corners, and inside the net
#Plot this data
ggplot(exit_success, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = success_rate)) +
scale_fill_gradient(low = "red", high = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Success Rate") +
geom_vline(xintercept=-89) #Add goal line
ggplot(exit_success, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = n)) +
scale_fill_gradient(high = "red", low = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Frequency by Location") +
geom_vline(xintercept=-89) #Add goal line
exit_success_type <- exits2 %>%
mutate(main_x = -abs(main_x)) %>%
group_by(main_x, main_y, sub_type) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(success_rate = successes/n) %>%
filter(main_x < -25,
main_x > -92 | abs(main_y) < 92,
n > 5) #Removing neutral zone, non-existant corners, and inside the rare events
#Plot this data
ggplot(filter(exit_success_type, !sub_type %in% c("failed", "icing")), aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = success_rate)) +
scale_fill_gradient(low = "red", high = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Success Rate") +
geom_vline(xintercept=-89) +
facet_grid(~sub_type)
ggplot(exit_success_type, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = n)) +
scale_fill_gradient(high = "red", low = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Frequency by Location") +
geom_vline(xintercept=-89) + #Add goal line
facet_grid(~sub_type)
#Add additional variables
dat3 <- dat2 %>%
group_by(game_id, period) %>%
mutate(last_team = lag(team_id),
same_team = team_id == last_team,
last_type = lag(type), last_sub_type = lag(sub_type),
last_main_x = lag(main_x), last_main_y = lag(main_y),
last_second_x = lag(second_x), last_second_y = lag(second_y)) %>%
ungroup()
#Restrict to zone exits and define success
model_exits1 <- dat3 %>%
filter(type == "zone_exit") %>%
mutate(successful_exit = ifelse(sub_type %in% c("failed", "icing", "dump_change"), FALSE, successful_exit)) %>%
filter(!is.na(successful_exit)) %>%
mutate(last_second_x = ifelse(is.na(last_second_x), -9999, last_second_x),
last_second_y = ifelse(is.na(last_second_y), -9999, last_second_y)) %>%
filter(!is.na(same_team))
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(seq(nrow(model_exits1)),
nrow(model_exits1)*cumsum(c(0,spec)),
labels = names(spec)
))
model_exits1 <- cbind(model_exits1, g)
#Reduce to variables used in model
model_exits2 <- select(model_exits1, g, period, main_x, main_y, same_team, last_type, last_sub_type, last_main_x, last_main_y, last_second_x, last_second_y, successful_exit)
train <- filter(model_exits2, g == "train") %>% select(-g)
test <- filter(model_exits2, g == "test") %>% select(-g)
val <- filter(model_exits2, g == "validate") %>% select(-g)
require(randomForest)
require(modelr)
set.seed(1366)
fit <- randomForest(successful_exit ~ ., data=train, importance=TRUE, ntree=500, do.trace = 50)
save(fit, file = "Initial Training Model.Rda")
val2 <- add_predictions(val, model = fit) %>%
mutate(Class = pred > .5)
mse <- mean((val2$pred - val2$successful_exit)^2)
table(val2$successful_exit, val2$Class)
#Accuracy of 69% is nice, but not better than that. MSE of .2
save(fit, file = "Initial Training Model.Rda")
load(Initial Training Model.Rda)
val2 <- add_predictions(val, model = fit) %>%
mutate(Class = pred > .5)
mse <- mean((val2$pred - val2$successful_exit)^2)
table(val2$successful_exit, val2$Class)
load(Initial Training Model.Rda)
load("Initial Training Model.Rda")
val2 <- add_predictions(val, model = fit) %>%
mutate(Class = pred > .5)
mse <- mean((val2$pred - val2$successful_exit)^2)
table(val2$successful_exit, val2$Class)
#fit2 <- randomForest(successful_exit ~ ., data=model_exits2, importance=TRUE, ntree=500, do.trace = 50)
#save(fit2, file = "Final Data Spring xExit Model.Rda")
load("Final Data Spring xExit Model.Rda")
me3 <- add_predictions(model_exits1, model = fit2, var = "xExit") %>%
mutate(added_value = successful_exit - xExit)
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id = as.factor(team_id))
ggplot(team_value_for, aes(x = reorder(team_id, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
team_value_against <- me3 %>%
mutate(opp = ifelse(team_id == home_team, away_team, home_team)) %>%
group_by(opp) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
opp = as.factor(opp))
ggplot(team_value_against, aes(x = reorder(opp, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Opponent Exit Value Added Per Game",
title = "Opponent Exit Value Above Expected Per Game",
subtitle = "Low value means the identified team prevented their opponent's zone exits")
player_value_for <- me3 %>%
group_by(team_id, main_player_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts) %>%
arrange(desc(extra_value_pergame))
head(player_value_for) #Best players
tail(player_value_for) #Worst players
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
setwd("C:/Users/alex.novet/Dropbox/Team 11")
dat1 <- read.csv("final_data2.csv")
#In Excel, I split out the location x and y values, but the file is otherwise the same.
#Find the transition event after each zone exit (imperfect, but acceptable for now)
exit_entry <- filter(dat1, game_state == "5v5",
type %in% c("zone_exit", "zone_entry"),
!sub_type %in% c("failed", "icing", "dump_change")) %>%
group_by(game_id, period) %>%
mutate(next_transition_team = lead(team_id))
#Define success for each exit based on the next transition play
exits1 <- exit_entry %>%
filter(type == "zone_exit") %>%
mutate(successful_exit = team_id == next_transition_team)
#Now merge this information back into the original data file, and make it 5v5
dat2 <- dat1 %>%
filter(game_state == "5v5") %>%
left_join(exits1)
exits2 <- dat2 %>%
filter(type == "zone_exit") %>% #Remove the ones at the end of the period with no subsequent event
mutate(successful_exit = ifelse(sub_type %in% c("failed", "icing", "dump_change"), FALSE, successful_exit)) %>%
filter(!is.na(successful_exit))
exit_success_QC <- group_by(exits2, sub_type) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(rate = successes/n)
exit_success_QC
exit_success <- exits2 %>%
mutate(main_x = -abs(main_x)) %>%
group_by(main_x, main_y) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(success_rate = successes/n) %>%
filter(main_x < -25,
main_x > -92 | abs(main_y) < 92,
n > 10) #Removing neutral zone, non-existant corners, and inside the net
#Plot this data
ggplot(exit_success, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = success_rate)) +
scale_fill_gradient(low = "red", high = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Success Rate") +
geom_vline(xintercept=-89) #Add goal line
ggplot(exit_success, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = n)) +
scale_fill_gradient(high = "red", low = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Frequency by Location") +
geom_vline(xintercept=-89) #Add goal line
exit_success_type <- exits2 %>%
mutate(main_x = -abs(main_x)) %>%
group_by(main_x, main_y, sub_type) %>%
summarise(n = n(), successes = sum(successful_exit)) %>%
mutate(success_rate = successes/n) %>%
filter(main_x < -25,
main_x > -92 | abs(main_y) < 92,
n > 5) #Removing neutral zone, non-existant corners, and inside the rare events
#Plot this data
ggplot(filter(exit_success_type, !sub_type %in% c("failed", "icing")), aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = success_rate)) +
scale_fill_gradient(low = "red", high = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Success Rate") +
geom_vline(xintercept=-89) +
facet_grid(~sub_type)
ggplot(exit_success_type, aes(x = main_x, y = main_y)) +
geom_tile(aes(fill = n)) +
scale_fill_gradient(high = "red", low = "steelblue") +
xlab("Distance from Center Ice (-89 = goal line)") +
ylab("") +
ggtitle("Zone Exit Frequency by Location") +
geom_vline(xintercept=-89) + #Add goal line
facet_grid(~sub_type)
#Add additional variables
dat3 <- dat2 %>%
group_by(game_id, period) %>%
mutate(last_team = lag(team_id),
same_team = team_id == last_team,
last_type = lag(type), last_sub_type = lag(sub_type),
last_main_x = lag(main_x), last_main_y = lag(main_y),
last_second_x = lag(second_x), last_second_y = lag(second_y)) %>%
ungroup()
#Restrict to zone exits and define success
model_exits1 <- dat3 %>%
filter(type == "zone_exit") %>%
mutate(successful_exit = ifelse(sub_type %in% c("failed", "icing", "dump_change"), FALSE, successful_exit)) %>%
filter(!is.na(successful_exit)) %>%
mutate(last_second_x = ifelse(is.na(last_second_x), -9999, last_second_x),
last_second_y = ifelse(is.na(last_second_y), -9999, last_second_y)) %>%
filter(!is.na(same_team))
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(seq(nrow(model_exits1)),
nrow(model_exits1)*cumsum(c(0,spec)),
labels = names(spec)
))
model_exits1 <- cbind(model_exits1, g)
#Reduce to variables used in model
model_exits2 <- select(model_exits1, g, period, main_x, main_y, same_team, last_type, last_sub_type, last_main_x, last_main_y, last_second_x, last_second_y, successful_exit)
train <- filter(model_exits2, g == "train") %>% select(-g)
test <- filter(model_exits2, g == "test") %>% select(-g)
val <- filter(model_exits2, g == "validate") %>% select(-g)
require(randomForest)
require(modelr)
set.seed(1366)
#fit <- randomForest(successful_exit ~ ., data=train, importance=TRUE, ntree=500, do.trace = 50)
#save(fit, file = "Initial Training Model.Rda")
load("Initial Training Model.Rda")
val2 <- add_predictions(val, model = fit) %>%
mutate(Class = pred > .5)
mse <- mean((val2$pred - val2$successful_exit)^2)
table(val2$successful_exit, val2$Class)
#Accuracy of 69% is nice, but not better than that. MSE of .2
#fit2 <- randomForest(successful_exit ~ ., data=model_exits2, importance=TRUE, ntree=500, do.trace = 50)
#save(fit2, file = "Final Data Spring xExit Model.Rda")
load("Final Data Spring xExit Model.Rda")
me3 <- add_predictions(model_exits1, model = fit2, var = "xExit") %>%
mutate(added_value = successful_exit - xExit)
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id = as.factor(team_id))
ggplot(team_value_for, aes(x = reorder(team_id, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
team_value_against <- me3 %>%
mutate(opp = ifelse(team_id == home_team, away_team, home_team)) %>%
group_by(opp) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
opp = as.factor(opp))
ggplot(team_value_against, aes(x = reorder(opp, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Opponent Exit Value Added Per Game",
title = "Opponent Exit Value Above Expected Per Game",
subtitle = "Low value means the identified team prevented their opponent's zone exits")
View(exits2)
goals <- dat2 %>%
filter(type == "goal")
View(goals)
gf <- dat2 %>%
filter(type == "goal") %>%
group_by(team_id) %>%
summarise(gp = n_distinct(game_id),
gf = n())
comparison <- left_join(team_value_for, gf)
gf <- dat2 %>%
filter(type == "goal") %>%
group_by(team_id) %>%
summarise(gp = n_distinct(game_id),
gf = n()) %>%
mutate(team_id = as.factor(team_id))
comparison <- left_join(team_value_for, gf)
View(comparison)
View(gf)
View(team_value_for)
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id2 = as.factor(team_id))
ggplot(team_value_for, aes(x = reorder(team_id2, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id = as.character(team_id))
ggplot(team_value_for, aes(x = reorder(team_id, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id = as.character(team_id))
ggplot(team_value_for, aes(x = reorder(team_id2, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
team_value_for <- me3 %>%
group_by(team_id) %>%
summarise(exit_attempts = n(),
exit_value_added = sum(added_value),
gp = n_distinct(game_id)) %>%
mutate(extra_value_pergame = exit_value_added / gp,
extra_value_perexit = exit_value_added / exit_attempts,
team_id = as.character(team_id))
ggplot(team_value_for, aes(x = reorder(team_id, -extra_value_pergame), y = extra_value_pergame)) + geom_col() +
labs(x = "Team ID", y = "Exit Value Added Per Game",
title = "Exit Value Above Expected Per Game")
gf <- dat2 %>%
filter(type == "goal") %>%
group_by(team_id) %>%
summarise(gp = n_distinct(game_id),
gf = n()) %>%
mutate(team_id = as.character(team_id))
comparison <- left_join(team_value_for, gf, )
comparison <- left_join(team_value_for, gf, by = "team_id")
View(comparison)
